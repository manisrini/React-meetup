{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/manikandan/Desktop/react/nextjs/meetup/pages/[meetId]/index.js\";\nimport { MongoClient, ObjectID } from 'mongodb';\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetDetail = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://Manikandan:Mani@1234@cluster0.l1fjx.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetId = context.params.meetId;\n  const client = await MongoClient.connect(\"mongodb+srv://Manikandan:Mani@1234@cluster0.l1fjx.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selmeetup = meetupsCollection.findOne({\n    _id: ObjectID(meetId)\n  });\n  return {\n    props: {\n      meetupData: {\n        image: selmeetup.image,\n        id: meetId,\n        description: selmeetup.description,\n        title: selmeetup.title(),\n        address: selmeetup.address()\n      }\n    }\n  };\n}\nexport default MeetDetail;","map":{"version":3,"sources":["/home/manikandan/Desktop/react/nextjs/meetup/pages/[meetId]/index.js"],"names":["MongoClient","ObjectID","MeetupDetail","MeetDetail","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","meetup","params","meetId","toString","getStaticProps","context","selmeetup","findOne","id"],"mappings":";;AAAA,SAAQA,WAAR,EAAoBC,QAApB,QAAmC,SAAnC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAVD;;AAYA,OAAO,eAAeC,cAAf,GAAgC;AAGnC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACjB,mGADiB,CAArB;AAIE,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAOC,OAAO,GAAE,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAG;AAAP,GAA1B,EAAqCC,OAArC,EAAtB;AAGF,SAAM;AACFC,IAAAA,QAAQ,EAAG,KADT;AAEFC,IAAAA,KAAK,EAAGL,OAAO,CAACM,GAAR,CAAYC,MAAM,KAAK;AAC3BC,MAAAA,MAAM,EAAG;AACLC,QAAAA,MAAM,EAAGF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AADJ;AADkB,KAAL,CAAlB;AAFN,GAAN;AASH;AAGD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAE1C,QAAMH,MAAM,GAAGG,OAAO,CAACJ,MAAR,CAAeC,MAA9B;AAEA,QAAMd,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACjB,mGADiB,CAArB;AAIE,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMc,SAAS,GAAGf,iBAAiB,CAACgB,OAAlB,CAA0B;AAACZ,IAAAA,GAAG,EAAGjB,QAAQ,CAACwB,MAAD;AAAf,GAA1B,CAAlB;AAEF,SAAM;AACFrB,IAAAA,KAAK,EAAG;AACJC,MAAAA,UAAU,EAAG;AACTC,QAAAA,KAAK,EAAGuB,SAAS,CAACvB,KADT;AAETyB,QAAAA,EAAE,EAAGN,MAFI;AAGThB,QAAAA,WAAW,EAAGoB,SAAS,CAACpB,WAHf;AAITF,QAAAA,KAAK,EAAGsB,SAAS,CAACtB,KAAV,EAJC;AAKTC,QAAAA,OAAO,EAAGqB,SAAS,CAACrB,OAAV;AALD;AADT;AADN,GAAN;AAYH;AAED,eAAeL,UAAf","sourcesContent":["import {MongoClient,ObjectID} from 'mongodb'\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetDetail = (props) => {\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n    />\n  );\n\n};\n\nexport async function getStaticPaths() {\n\n\n    const client = await MongoClient.connect(\n        \"mongodb+srv://Manikandan:Mani@1234@cluster0.l1fjx.mongodb.net/meetups?retryWrites=true&w=majority\"\n      )\n\n      const db = client.db();\n  \n      const meetupsCollection = db.collection(\"meetups\");\n\n      const  meetups= await meetupsCollection.find({},{_id : 1}).toArray()\n\n\n    return{\n        fallback : false,\n        paths : meetups.map(meetup => ({\n            params : {\n                meetId : meetup._id.toString()\n            }\n        }))\n       \n}\n}\n\n\nexport async function getStaticProps(context) {\n\n    const meetId = context.params.meetId\n\n    const client = await MongoClient.connect(\n        \"mongodb+srv://Manikandan:Mani@1234@cluster0.l1fjx.mongodb.net/meetups?retryWrites=true&w=majority\"\n      )\n\n      const db = client.db();\n  \n      const meetupsCollection = db.collection(\"meetups\");\n\n      const selmeetup = meetupsCollection.findOne({_id : ObjectID(meetId) })\n\n    return{\n        props : {\n            meetupData : {\n                image : selmeetup.image,\n                id : meetId,\n                description : selmeetup.description,\n                title : selmeetup.title(),\n                address : selmeetup.address()\n\n            }\n        }\n    }\n}\n\nexport default MeetDetail;\n"]},"metadata":{},"sourceType":"module"}